=> 'This' in the Global Context

	console.log(this === window);

	a = 23;
	console.log(window.a); 

	this.b = "Sachin";
	console.log(window.b)  
	console.log(b)

	output =>

	VM29:1 true
	VM29:4 23
	VM29:7 Sachin
	VM29:8 Sachin


=> 'This' in Function Context

	function f1() {
	  return this;
	}

	f1() === window;
	f1() === global;

	output => 
		true 
		true

	In Strict mode 

	function f2() {
	  'use strict';
	  return this;
	}

	f2() === undefined;

	output => True



=> Arrow Function

	var myObj = this;
	var fun = (() => this);
	console.log(fun() === myObj);

	output=> true

=> Bind

	function f() {
	  return this.a;
	}

	var g = f.bind({a: 'Sachin'});
	console.log(g());

	output=> Sachin


=> 'This' refers to instance


	function Person(fn, ln) {
		this.first_name = fn;
		this.last_name = ln;

		this.displayName = function() {
			console.log(`Name: ${this.first_name} ${this.last_name}`);
		}
	}

	let person = new Person("Sachin", "Katheriya");
	person.displayName(); 

	output=> 
		Sachin Katheriya


	function fun () {
		'use strict';
		console.log("Hello")
		console.log(this === window); 
	}

	let user = {
		count: 10,
		foo: foo,
		foo1: function() {
			console.log(this === window);
		}
	}

	user.fun() ;
	


=> Call and Apply	

	var p = {
	    firstname: 'Sachin',
	    lastname: 'Katheriya',
	    getName: function() {
		var fullname = this.firstname + ' ' + this.lastname;
		return fullname;
	    }
	};

	var pName = function(a, b) {
	    console.log(this.getName() + ' loves ' + a + ' and ' + b);
	};

	pName.call(p,'Coding', 'algorithms');
	pName.apply(p,['sushi', 'algorithms']);


	output=> 
		Sachin Katheriya loves Coding and algorithms
		Sachin Katheriya loves Coding and algorithms
